#! @WISH@
#
# shmz
# 2004.04.28- (C) Hiroshi TSURUOKA / All Rights Reserved.
#
# version 0.9.1 2004/04/28
#         0.9.2      05/06
#         0.9.3      09/20 add socket connection
#
set version 0.9.3

# NR f77 -> tcl
# 2002/08/12 Hiroshi TSURUOKA
proc julday { mm id iyyy } {
    set  igreg [expr int(15+31*(10+12*1582))]
    if { $iyyy == 0 } {
	puts "there is no year zero."
    }
    if { $iyyy<0 } {
	set iyyy [expr $iyyy+1]
    }
    if { $mm>2 } {
	set jy $iyyy
	set jm [expr $mm + 1]
    } else {
	set jy [expr $iyyy - 1]
	set jm [expr $mm + 13]
    }
    set julday [expr int(365.25*$jy)+int(30.6001*$jm)+$id+1720995]
    if { [expr $id+31*($mm+12*$iyyy)] >= $igreg } {
	set ja [expr int(0.01*$jy)]
	set julday [expr $julday+2-$ja+int(0.25*$ja)]
    }
    return $julday;
}

#fconfigure stdin -buffering none
#console show

if { $argc < 1 } {
    puts "shmz <-mMIN> <-nNLINE> <-yPIXEL> <-wCLIPLEVEL> <-p> <-o>"
    puts "     <-xWIDTH> <-cNCOLOR> <-fSHMDUMP> <-tTABLE> <-qQUICK>" 
    puts "     <-sSCALE> <-Ddiv> <-Hhostname> <-Pport> channel1 channel2 ..."
    exit
}

# default setting
set pipe 0
set maxch 0
set min 1
set nsec [expr $min*60]
set nline 6
set wy2 12
set wy [expr 2.0*$wy2]
set clip 1.0
set lsb [expr $clip*$wy2]
set cw 750
set ncol 0
set shmdump ""
set table 0
set LTA 30
set LTA2 [expr 1.0/$LTA]
set LTA1 [expr 1.0-$LTA2]
set quick 1
set offset 1
set order 1
set DIV 1e-6
set CHIDS {}

for { set j 0 } { $j < $argc } { incr j } {
    set tmpargv [lindex $argv $j]
    set optflag [string range $tmpargv 0 1]
    if { $optflag == "-m" } {
	set min [string range $tmpargv 2 [string length $tmpargv]]
	#		if { $min > 60 } { set min 60 }
	set nsec [expr 60*$min]
    } elseif { $optflag == "-n" } {
	set nline [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-y" } {
	set wy2 [string range $tmpargv 2 [string length $tmpargv]]
	set wy [expr 2.0*$wy2]
	set lsb [expr $clip*$wy2]
    } elseif { $optflag == "-w" } {
	set clip [string range $tmpargv 2 [string length $tmpargv]]
	set lsb [expr $clip*$wy2]
    } elseif { $optflag == "-p" } {
	set pipe 1
    } elseif { $optflag == "-o" } {
	set order 0
    } elseif { $optflag == "-x" } {
	set cw [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-c" } {
	set ncol [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-q" } {
	set quick [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-s" } {
	set DIV [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-f" } {
	set shmdump [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-t" } {
	set ftable [string range $tmpargv 2 [string length $tmpargv]]
	set table 1
    } elseif { $optflag == "-l" } {
	set LTA [string range $tmpargv 2 [string length $tmpargv]]
	set LTA2 [expr 1.0/$LTA]
	set LTA1 [expr 1.0-$LTA2]
	set offset 1
    } elseif { $optflag == "-D" } {
	set DIV [string range $tmpargv 2 [string length $tmpargv]]
    } elseif { $optflag == "-H" } {
	set host [string range $tmpargv 2 [string length $tmpargv]]
	set shmdump "socket"
    } elseif { $optflag == "-P" } {
	set port [string range $tmpargv 2 [string length $tmpargv]]
	set shmdump "socket"
    } else {
	set channel($maxch) [lindex $argv $j]
	set channel($maxch) [string toupper $channel($maxch)]
	set CHIDS [concat $CHIDS $channel($maxch)]
	set MON($channel($maxch)) 0
	set CHINFO($channel($maxch)) "--- --"
	#	  puts "$channel($maxch)"
	incr maxch
    }
}

#if { $maxch > 20 } {
#    set maxch 20
#}

if { $table == 1 } {
    set ft [open $ftable r]
    #    puts "$ftable"
    #    puts "$CHIDS"
    while {![eof $ft]} {
	gets $ft line
        set ind1 [string first "#" $line]
        set nind [llength $line]
	#        puts "$ind1 $ind2 $nind"
        if { $ind1 != 0 && $nind > 11 } {
	    set tmpchid [lindex $line 0]
	    set CHID [string toupper $tmpchid]
	    #        puts "$CHID"
	    if { [lsearch $CHIDS $CHID] > -1 } {
		set tmpstn [lindex $line 3]
		set tmpcomp [lindex $line 4]
		set tmpmon [lindex $line 5]
		set tmpsens [lindex $line 7]
		set tmpgain [lindex $line 11]
		set tmplsb [lindex $line 12]
		#	puts "$tmpchid $tmpstn.$tmpcomp $tmpmon $tmpsens $tmpgain $tmplsb"
		set CHINFO($CHID) "$tmpstn $tmpcomp"
		set MON($CHID) $tmpmon
		set c [expr pow(10.0,double($tmpgain)/20.0)]
		#        puts "$tmpchid $tmplsb $tmpsens $tmpgain"
		set MUL($CHID) [expr double($tmplsb)/double($tmpsens)/double($c)]
		#        puts "$line"
		#        puts "$CHID $MUL($CHID)"
	    }
	}
    }
    close $ft
}

set title "SHMZ version $version"

#set wx  0.25; set wy 20; set nsec 3600; set nline 24; # 1 day
#set wx  0.75; set wy 25 set nsec 900; set nline 6; # 1 hour

if { $shmdump == "" } {
    set fpin stdin
} else {
    set fpin $shmdump
}
set fpout stdout

set wdy 0.05
#set cw [expr $wx*$nsec]
#set cw 800.0
set wx [expr double($cw)/double($nsec)]
set ch [expr $wy*($nline-1+2+2.0*$wdy)]

wm title . $title
wm resizable . 0 0
wm geometry . +0+0

set bk #000000
for { set j 0 } { $j < $maxch } { incr j } {
    frame .v($j)
    label .v($j).info($j) -text $channel($j) -width 10
    frame .v($j).level
    frame .v($j).info2
    set tmpch $channel($j)
    set gain($j) 0
    set rmean($j) 0.0
    set level($j) 0.0
    set calrmean($j) 0
    if { $MON($tmpch) != 0 } {
	set gain($j) [expr $MON($tmpch)]
    }
    canvas .v($j).canvas0 -background $bk -width 50 -height $ch -relief sunken -border 1
    canvas .v($j).canvas($j) -background $bk -width $cw -height $ch -relief sunken -border 1
    for { set i 0 } { $i < $nline } { incr i } {
	set y0 [expr $wy*($i + 1.0 + $wdy)]
	eval .v($j).canvas($j) create line 0 $y0 $cw $y0 -fill #333333 -width 1
    }
    label .v($j).info2.stn -text "CHINFO" -textvariable CHINFO($tmpch) -width 10
    label .v($j).info2.time -text "MM:SS" -textvariable chtime($j) -width 5
    if { $nline < 2 && $wy <= 30 } {
	pack .v($j).info2.time .v($j).info2.stn -side left
    } else {
	pack .v($j).info2.time .v($j).info2.stn
    }
    pack .v($j).info($j) .v($j).canvas0 .v($j).canvas($j) .v($j).info2 -side left
}
for { set j 0 } { $j < $maxch } { incr j } {
    pack .v($j)
}
frame .bottom
label .bottom.scale -text "SCALE" -textvariable DIV
label .bottom.scaleinfo -text "/ 1pixel"
button .bottom.zoomin -text "+" -command { set DIV [expr $DIV/2] } -relief raised -border 1
button .bottom.zoomout -text "-" -command { set DIV [expr 2*$DIV] } -relief raised -border 1
button .bottom.level -text "LEVEL" -command { for { set j 0 } { $j < $maxch } { incr j } { set level($j) [expr int($rmean($j))] } } -relief raised -border 1
label .bottom.m -text "MIN:"
label .bottom.min -text "min" -textvariable min
label .bottom.l -text "LTA:"
label .bottom.lta -text "LTA" -textvariable LTA
label .bottom.lsbl -text "LSB +/-:"
label .bottom.lsb -text "lsb" -textvariable lsb
label .bottom.pixell -text "pixel +/-:"
label .bottom.pixel -text "PIXEL" -textvariable wy2
label .bottom.time -text "date" -textvariable nowtime -width 24
button .bottom.quit -text "QUIT" -command { exit } -relief raised -width 20 -border 1
pack .bottom.scale .bottom.scaleinfo .bottom.zoomin .bottom.zoomout .bottom.level .bottom.m .bottom.min .bottom.l .bottom.lta .bottom.lsbl .bottom.lsb .bottom.pixell .bottom.pixel .bottom.time .bottom.quit -side left
pack .bottom -expand yes -side top
update

set nx 0
set ny 0
set dt 0
for { set j 0 } { $j < $maxch } { incr j } {
    set tag($j) line000000
    set tag0($j) line000000
    set ylast($j) 0
}

if { $fpin == "stdin" } {
    set fp $fpin 
} elseif { $fpin == "socket" } {
    set fp [socket $host $port]
} else {
    set fp [open $fpin r]
}

set mi0 -999

while {![eof $fp]} {
    #	after 100
    gets $fp line
    scan $line "%d %d %d %d %d %d %d" yr mo dy hr mi sc nch
    #	if { $mi0 == -999 } { set mi0 $mi }
    if { $mi0 == -999 } { 
	set mi0 0; set hr0 0;
	set jul0 [julday $mo $dy [expr 2000+$yr]]
    }
    set jul [julday $mo $dy [expr 2000+$yr]]
    set mm [expr 1440*($jul-$jul0)+60*($hr - $hr0) + $mi - $mi0]
    set nx [expr 60*($mm%$min)+$sc]
    set ny [expr int($mm/$min)%$nline]
    if { $pipe } { puts $line }
    set nowtime [format "%02d/%02d/%02d %02d:%02d:%02d" $yr $mo $dy $hr $mi $sc]
    #	set nowtime [format "%02d/%02d/%02d" $yr $mo $dy]
    set get 0
    for { set j 0 } { $j < $maxch } { incr j } {
	set freq($channel($j)) 0
    }
    for { set i 0 } { $i < $nch } { incr i } {
	gets $fp tmpdata
	if { $pipe } { puts $tmpdata }
	set chid "[lindex $tmpdata 0]"
	set freq($chid) "[lindex $tmpdata 1]"
	set data($chid) $tmpdata
	if { $nch > 0 } then { 
	    set get 1 
	}
    }
    if { $pipe == 1 } { flush $fpout}
    if { $get == 1 } then {
	for { set j 0 } { $j < $maxch } { incr j } {
	    if { $gain($j) < 0}  {
		set gain($j) 0
	    }
	    set g($j) {}
	    set tmpch $channel($j)
	    set freq2 $freq($tmpch)
	    # calc mean
	    set sum 0.0
	    for { set i 0 } { $i < $freq2 } { incr i } {
		set y [lindex $data($tmpch) [expr $i + 2]]
		set sum [expr $sum+$y]
	    }
	    #		set rmean($j) [expr 0.5*($rmean($j)+$sum/$freq2)]
	    if { $freq2 > 0 } {
		if { $calrmean($j) == 0 } {
		    set rmean($j) [expr $sum/$freq2]
		    set rmean($j) [expr int($rmean($j))]
		    set level($j) $rmean($j)
		    set calrmean($j) 1
		} else {
		    set rmean($j) [expr $LTA1*$rmean($j)+$LTA2*($sum/$freq2)]
		    #			  set rmean($j) [expr int($rmean($j))]
		} 
	    }
	    #		puts "$j $sum $rmean($j)"
	    #		if { $freq2 == 1 } {
	    set gx [expr $wx*$nx]
	    #	    set div [expr pow(2.0,$gain($j))]
	    #	    set ymax [expr $clip*$wy2*$div]
	    set ymax [expr ($clip*$wy2)/($MUL($tmpch)/$DIV)]
	    #####
	    #            puts "$ymax $clip $wy2 $div $gain($j)"
	    set y $ylast($j)
	    if { $offset == 1 } {
		set yy [expr $y - $level($j)]
	    } else {
		set yy $y
	    }
	    if { $yy > $ymax } { set yy $ymax; }
	    if { $yy < [expr -$ymax] } { set yy [expr -$ymax]; }
	    #	    set gy [expr -$yy/$div + $wy*($ny+1.0+$wdy)]
	    #            set div [expr 0.5e-6]
	    set gy [expr -$yy*$MUL($tmpch)/$DIV + $wy*($ny+1.0+$wdy)]
	    if { $freq2 == 1 } {
		set g($j) [concat $g($j) $gx $gy]
	    }
	    #		}
	    for { set i 0 } { $i < $freq2 } { incr i $quick } {
		set gx [expr $wx*$nx+$wx*($i+1)/$freq2]
		set y [lindex $data($tmpch) [expr $i + 2]]
		#		set div [expr pow(2.0,$gain($j))]
		#		set ymax [expr $clip*$wy2*$div]
	        set ymax [expr ($clip*$wy2)/($MUL($tmpch)/$DIV)]
		if { $offset == 1 } {
		    set yy [expr $y - $level($j)]
		} else {
		    set yy $y
		}
		if { $yy > $ymax } { set yy $ymax; }
		if { $yy < [expr -$ymax] } { set yy [expr -$ymax]; }
		#                	set gy [expr -$wy*$yy/$ymax + $wy*($ny+1.0+$wdy)]
		#                set div [expr 0.5e-6]
		set gy [expr -$yy*$MUL($tmpch)/$DIV + $wy*($ny+1.0+$wdy)]
		set g($j) [concat $g($j) $gx $gy]
	    }
	    if { $freq2 > 0 } {
		set ylast($j) [lindex $data($tmpch) [expr $freq2 + 1]]
	    }
	    if { $ncol == 0 } {
		set color white
	    } else {
		set col [expr $j % $ncol]
		if { $col == 0 } {
		    set color red
		} elseif { $col == 1 } {
		    set color cyan
		} elseif { $col == 2 }  {
		    set color yellow
		} else { 
		    set color white
		}
	    }
	    #		set nx $sc
	    #		set mm [expr $mi - $mi0]
	    #		set ny [expr $mm%$nline]
	    if { $freq2 > 0 } {
		if { $order == 1 } { 
		    if { $nx == 0 } {
			for { set xx 0 } { $xx < $nsec } { incr xx } {
			    set deletetag($j) sprintf("line%02d%02d%02d",$xx,$ny,$j)
			    eval .v($j).canvas($j) delete $deletetag($j)
			}
		    }
		}
		set linetag($j) sprintf("line%02d",$j)
		eval .v($j).canvas($j) delete $linetag($j)
		eval .v($j).canvas($j) create line [expr $wx*($nx+1)] [expr -$wy+$wy*($ny+1.0+$wdy)] [expr $wx*($nx+1)] [expr $wy+$wy*($ny+1.0+$wdy)] -fill blue -width 1 -tags $linetag($j)
		#			eval .v($j).canvas($j) create bitmap [expr $wx*($nx+1)] [expr $wy*($ny+1.0+$wdy)] -bitmap hourglass -foreground $color -tags $linetag($j)
		set chtime($j) [format "%02d:%02d" $mi $sc]
		set chtimehhmm($j) [format "%02d:%02d" $hr $mi]
		set tag($j) sprintf("line%02d%02d%02d",$nx,$ny,$j)
		eval .v($j).canvas($j) delete $tag($j)
		eval .v($j).canvas($j) create line $g($j) -fill blue -tags $tag($j) -width 1
		eval .v($j).canvas($j) itemconfigure $tag0($j) -fill $color
		set tag0($j) $tag($j)
		if { $mm%$min==0 } {
		    set texttag($j) sprintf("text%02d",$ny)
		    eval .v($j).canvas0 delete $texttag($j)
		    eval .v($j).canvas0 create text 25 [expr $wy*($ny+1.0+$wdy)] -fill white -text $chtimehhmm($j) -anchor center -tags $texttag($j)
		}
	    }
	}
	update	
    }
}
if { $fpin == "stdin" } {
    ;
} else {
    close $fp
}
